=======	Comandos úteis	==========

git config --list 
#Lista das insformações do GIT.

git init 
#Comando responsável por inicializar o repositório e ficar enxergando todas as mudanças que houver dentro do projeto.

git status
# Informa como esta o seu repositório.

git add (nome do arquivo) 
# O Git adiciona o arquivo e passa a reconhecê-lo, caso esteja com o status Untracked.

git commit -m "(comentário)"
# Comando para comitar o arquivo e, o -m significa que no ato será escrito um comentário.

git log
# exibe o log como hash do commit.

git log --decorate
# Exibe com mais informações 

git log --author="nome do autor"
# Exibirá todos os commit feito pelo autor inserido

git shortlog
# Exibirá em ordem alfabética de autores, o número de commit feito e quais os nomes de cada.

git show + (hash) 
# exibirá o que foi alterado no commit através da hash.

git diff
# Exibe as alterações feitas no arquivo antes mesmo de ser feito o commit. Comando muito importante para revisar suas alterações antes do COMMIT.

git diff --name-only
# Exibe todos os arquivos que foram alterados.

git checkout (+ nome do arquivo)
# Comando utilizado para desfazer alguma alteração no arquivo antes de ter feito o reconhecimento do arquivo dentro do repositório (git add).

git reset HEAD (+ nome do arquivo) 
# Desfaz a alteração do arquivo mesmo após o reconhecimento do arquivo no repositório ( após o git add )

git reset --soft (+ hash)
# Desfaz o comit mas... 

git reset --mixed (+ hash)
# Desfaz...

git reset --hard ( + hash)
# Deve ser usado apenas se houver certeza, pois ele altera o histórico do commit.

git remote add (+crie um nome)
# Comando para adicionar um novo repositório remoto.

git push origin (origin é o nome do repositório)  master (master é o nome da branch)
# Esse comando é utilizado para fazer o upload dos arquivos alterados para o GitHub

git pull origin (origin é o nome do repositório) master (master é o nome da branch)
# Esse comando é utilizado para realizar o Download das alterações quando são feitas através do GitHub.

git checkout -b teste 
# Cria uma nova Branch chamada teste ou se ja existir ele muda para a Branch digitada.

git branch
# Lista as Branch existentes

git branch -D teste
# Apaga a Branch chamada teste

.gitignore
# Criando um arquivo .gitignore é possível bloquear quaisquer arquivos para fazer o upload no GitHub. Esse bloqueio pode ser feito através do nome direto do arquivo ou bloqueando a extensão do mesmo. Exemplo: Supondo que dentro do repositório há diversos arquivos .json e você não quer que o mesmo vá para a área pública, portanto, crie o arquivo dentro do mesmo repositório .gitignore e dentro dele adicione *.json .

git stash 
# Comando utilizado para salvar o seu arquivo alterado mas que ainda não esta pronto para comitar, ou seja, o mesmo esta em WIP (working in progress). 


git stash apply
# Ele aplica as mudanças que você havia inserido e, agora, irá aparecer como arquivo alterado após rodar um git status como por exemplo. Após as devidas alterações o arquivo pode ser comitado.

git stash clear
# Limpa as informações que estão no stash.

git config --global alias.s status
# É possível criar alias dentro do Git, nesse caso, o comando acima configura um alias para o comando git status, o mesmo ficará como git s. git config(seta configuração) --global (modo global) alias.s (determina a letra s) status (comando configurado no alias).


git tag -a 1.0.0 -m "Nova Tag"
# Comando para criar uma TAG.

git push origin master --tags
# Comando para fazer o push da tag criada.

git branch -a
# Listando as branch's locais e remotas

